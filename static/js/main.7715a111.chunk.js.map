{"version":3,"sources":["trivia.png","redux/actions/index.js","services/api.js","pages/Login/index.jsx","components/Header/index.jsx","components/AnswerOptions/index.jsx","helpers/func.js","pages/Game/index.jsx","pages/Ranking/index.jsx","pages/Feedback/index.jsx","routes/index.routes.js","App.js","serviceWorker.js","redux/reducers/player.js","redux/reducers/index.js","redux/reducers/token.js","redux/store/index.js","index.js"],"names":["module","exports","playerData","data","type","tokenData","token","customFetch","URL","ENDPOINT","a","fetch","then","response","json","catch","error","console","log","fetchToken","fetchQuestion","Login","React","useState","name","email","state","setState","dispatch","useDispatch","history","useHistory","handleChange","target","value","push","id","src","TriviaLogo","alt","onSubmit","event","preventDefault","className","htmlFor","data-testid","onChange","placeholder","disabled","onClick","Header","useSelector","player","gravatarEmail","score","md5","toString","AnswerOptions","shuffled","handleClick","answered","map","i","text","correct","key","shuffleAnswers","answers","correct_answer","incorrect_answers","answer","sort","Math","random","Game","questions","setQuestions","questionIndex","setQuestionIndex","setShuffled","setAnswered","timer","setTimer","useEffect","interval","setTimeout","prev","clearTimeout","results","newToken","getNewQuestion","category","decodeURIComponent","question","replace","difficultyScores","hard","medium","easy","difficulty","length","Ranking","players","setPlayers","verifyStorage","JSON","parse","localStorage","getItem","b","index","to","Feedback","assertions","playersInfo","picture","setItem","stringify","Routes","basename","process","exact","path","component","App","Boolean","window","location","hostname","match","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,oC,+TCApC,SAASC,EAAWC,GACzB,MAAO,CACLC,KAAM,kBACND,QAIG,SAASE,EAAUC,GACxB,MAAO,CACLF,KAAM,YACNE,S,SCVWC,E,gFAAf,WAA2BC,EAAKC,GAAhC,SAAAC,EAAA,+EACSC,MAAMH,EAAMC,GAChBG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACT,GAAD,OAAUA,KACfY,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,UAAWF,OAJ7C,4C,sBAOO,SAASG,IAGd,OAAOZ,EAFK,sBACK,kCAIZ,SAASa,EAAcd,GAG5B,OAAOC,EAFK,sBACE,kCAA8BD,I,qBCP/B,SAASe,IACtB,MAA0BC,IAAMC,SAAS,CACvCC,KAAM,GACNC,MAAO,KAFT,mBAAOC,EAAP,KAAcC,EAAd,KAKMC,EAAWC,cACXC,EAAUC,cAEhB,SAASC,EAAT,GAAmC,IAAXC,EAAU,EAAVA,OACdT,EAAgBS,EAAhBT,KAAMU,EAAUD,EAAVC,MACdP,EAAS,2BACJD,GADG,kBAELF,EAAOU,KAbkB,4CAiB9B,8BAAAxB,EAAA,sEAC0BS,IAD1B,gBACUb,EADV,EACUA,MACRsB,EAASvB,EAAUC,IACnBsB,EAAS1B,EAAWwB,IACpBI,EAAQK,KAAK,SAJf,4CAjB8B,sBAwB9B,OACE,yBAAKC,GAAG,YACN,yBAAKA,GAAG,OAAOC,IAAMC,IAAaC,IAAI,gBACtC,0BAAMH,GAAG,aAAaI,SAAW,SAACC,GAAD,OAAWA,EAAMC,mBAChD,2BAAOC,UAAU,cAAcC,QAAQ,cACrC,2BACED,UAAU,cACVnB,KAAK,OACLY,GAAG,aACHhC,KAAK,OACLyC,cAAY,oBACZX,MAAQR,EAAMF,KACdsB,SAAWd,EACXe,YAAY,UAGhB,2BAAOJ,UAAU,cAAcC,QAAQ,eACrC,2BACED,UAAU,cACVnB,KAAK,QACLY,GAAG,cACHhC,KAAK,QACLyC,cAAY,uBACZX,MAAQR,EAAMD,MACdqB,SAAWd,EACXe,YAAY,WAGhB,4BACEJ,UAAU,YACVP,GAAG,WACHhC,KAAK,SACLyC,cAAY,WACZG,SAA0B,KAAftB,EAAMF,MAA+B,KAAhBE,EAAMD,MACtCwB,QA1DsB,4CAoDxB,U,2BCvDO,SAASC,IACtB,MAEIC,aAAY,SAACzB,GAAD,OAAWA,KADzB0B,OAAUC,EADZ,EACYA,cAAe7B,EAD3B,EAC2BA,KAAM8B,EADjC,EACiCA,MAGjC,OACE,gCACE,iCACE,yBACET,cAAY,yBACZR,IAAG,0CAAsCkB,IACvCF,GACAG,YACFjB,IAAI,WAEN,uBAAGM,cAAY,sBAAsBrB,IAEvC,6BACE,uBAAGqB,cAAY,gBAAf,iBAAyCS,EAAzC,c,MCpBO,SAASG,EAAT,GAA6D,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAC7D,OACE,yBAAKf,cAAY,kBACda,EAASG,KAAI,WAAwBC,GAAxB,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAS5B,EAAlB,EAAkBA,GAAlB,OACZ,4BACEa,QAAU,kBAAMU,EAAYK,IAC5BrB,UAAS,mBAAeiB,GAAYI,GAAW,UAAtC,2BACHJ,IAAaI,GAAW,aAC9BnB,cAAcmB,EAAU,iBAAH,uBAAsC5B,GAC3D6B,IAAG,UAAMF,EAAN,YAAcD,GACjB1D,KAAK,SACL4C,SAAWY,GAEVG,O,YCLIG,EAXQ,SAACC,GAQtB,MANgB,CACd,CAAEJ,KAAMI,EAAQC,eAAgBJ,SAAS,IAD3B,mBAEXG,EAAQE,kBAAkBR,KAC3B,SAACS,GAAD,MAAa,CAAEP,KAAMO,EAAQN,SAAS,QAGxBO,MAAK,kBAAMC,KAAKC,SAPf,OCgBN,SAASC,IAAQ,IAAD,IAC7B,EAAkCnD,mBAAS,IAA3C,mBAAOoD,EAAP,KAAkBC,EAAlB,KACA,EAA0CrD,mBAAS,GAAnD,mBAAOsD,EAAP,KAAsBC,EAAtB,KACA,EAAgCvD,mBAAS,IAAzC,mBAAOmC,EAAP,KAAiBqB,EAAjB,KACA,EAAgCxD,oBAAS,GAAzC,mBAAOqC,EAAP,KAAiBoB,EAAjB,KACA,EAA0BzD,mBARb,IAQb,mBAAO0D,EAAP,KAAcC,EAAd,KAEQ5E,EAAU6C,aAAY,SAACzB,GAAD,OAAWA,KAAjCpB,MACFsB,EAAWC,cACXC,EAAUC,cA4DhB,OAjCAoD,qBAAU,WACR,IAAMC,EAAWC,YAAW,WAC1BH,GAAS,SAACI,GAAD,OAAUA,EAAO,OAxCb,KA4Cf,OADc,IAAVL,GAAaD,GAAY,GACzBpB,EAAiB2B,aAAaH,GAE3B,kBAAMG,aAAaH,MACzB,CAACxB,EAAUqB,IAEdE,qBAAU,YACY,uCAAG,8BAAAzE,EAAA,0DACjBJ,EADiB,0CAGEc,EAAcd,GAHhB,OAGXH,EAHW,OAIjByE,EAAazE,EAAKqF,SAClBvE,QAAQC,IAAIf,EAAKqF,SALA,gDAOXC,EAAWtE,IACjBS,EAASvB,EAAUoF,IARF,yDAAH,qDAYpBC,KACC,CAACpF,EAAOsB,IAEXuD,qBAAU,WACJR,EAAUE,IACZE,EAAYb,EAAeS,EAAUE,OAEtC,CAACF,EAAWE,IAGb,oCACE,kBAAC,EAAD,MACA,yBAAKlC,UAAU,YACb,uBAAGA,UAAU,SAASE,cAAY,qBAAlC,UACG8B,EAAUE,UADb,aACG,EAA0Bc,UAE7B,wBAAI9C,cAAY,iBACb+C,mBAAkB,UAACjB,EAAUE,UAAX,aAAC,EAA0BgB,SAASC,QAAQ,UAAW,OAG5E,kBAACrC,EAAD,CACEE,YAtER,SAAqBK,GACnBgB,GAAY,GACZ,IAAMe,EAAmB,CACvBC,KAlBM,GADC,EAmBKf,EACZgB,OAnBM,GAFG,EAqBKhB,EACdiB,KApBM,GAoBMjB,GAGVjB,IACFpC,ENRG,CACLxB,KAAM,sBMQJwB,ENhBG,CACLxB,KAAM,eACNkD,MMegByC,EAAiBpB,EAAUE,GAAesB,gBA4DpDzC,SAAWA,EACXE,SAAWA,IAEZA,GACC,4BACEX,QA5DV,WACEiC,EA/BW,IAgCXF,GAAY,GACZF,GAAiB,SAACpD,GAAD,OAAWA,EAAQ,KAChCmD,IAAkBF,EAAUyB,OAAS,GACvCtE,EAAQK,KAAK,cAwDPU,cAAY,WACZzC,KAAK,SACLuC,UAAU,YAJZ,QASF,wBAAIA,UAAU,SAASsC,K,MC5GhB,SAASoB,IACtB,MAA8B9E,mBAAS,IAAvC,mBAAO+E,EAAP,KAAgBC,EAAhB,KAQA,OAPApB,qBAAU,WACR,IAAMqB,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,YACtD3F,QAAQC,IAAIsF,GACRA,GACFD,EAAWC,EAAcjC,MAAK,SAAC7D,EAAGmG,GAAJ,OAAUA,EAAEvD,MAAQ5C,EAAE4C,YAErD,IAED,yBAAKX,UAAU,eACb,wBAAIE,cAAY,iBAAhB,WACEyD,EAAQzC,KAAI,SAACnD,EAAGoG,GAAJ,OACZ,yBAAK7C,IAAM6C,EAAQnE,UAAU,oBAC3B,wBAAIE,cAAA,sBAA6BiE,IAAWpG,EAAEc,MAC9C,0BAAMqB,cAAA,uBAA8BiE,IACjCpG,EAAE4C,MACF,UAFH,cAOJ,kBAAC,IAAD,CAAMyD,GAAG,KACP,4BACElE,cAAY,cACZzC,KAAK,SACLuC,UAAU,eAHZ,a,MClBO,SAASqE,IACtB,MAAmD7D,aAAY,qBAAGC,UAA1D6D,EAAR,EAAQA,WAAY3D,EAApB,EAAoBA,MAAO9B,EAA3B,EAA2BA,KAAM6B,EAAjC,EAAiCA,cAC3B6D,EAAc,CAClB1F,OACA8B,QACA6D,QAAQ,mCAAD,OAAqC5D,IAAIF,GAAeG,aAC3DgD,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,YAQtD,OANKJ,EAGHG,aAAaS,QAAQ,UAAWX,KAAKY,UAAL,sBAAmBb,GAAnB,CAAkCU,MAFlEP,aAAaS,QAAQ,UAAWX,KAAKY,UAAU,CAACH,KAMhD,oCACE,kBAAC,EAAD,MACA,yBAAKrE,cAAY,iBACf,uBAAGA,cAAY,iBAEXoE,EAtBE,EAsBmB,qBAAuB,cAGhD,uBAAGtE,UAAU,eAAb,6BAEE,0BAAME,cAAY,wBACfS,EACD,4CAGJ,uBAAGX,UAAU,eAAb,4BAEE,0BAAME,cAAY,2BACdoE,EACF,+CAGJ,kBAAC,IAAD,CAAMF,GAAG,KACP,4BACElE,cAAY,iBACZzC,KAAK,SACLuC,UAAU,gBAHZ,eAQF,kBAAC,IAAD,CAAMoE,GAAG,YACP,4BACElE,cAAY,cACZzC,KAAK,SACLuC,UAAU,gBAHZ,cChDV,IAWe2E,EAXA,kBACb,kBAAC,IAAD,CAAYC,SAAWC,yBACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYtG,IAClC,kBAAC,IAAD,CAAOqG,KAAK,QAAQC,UAAYjD,IAChC,kBAAC,IAAD,CAAOgD,KAAK,WAAWC,UAAYtB,IACnC,kBAAC,IAAD,CAAOqB,KAAK,YAAYC,UAAYX,OCV3B,SAASY,IACtB,OACE,kBAAC,EAAD,MCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BClBAC,EAAgB,CACpB1G,KAAM,GACNyF,WAAY,EACZ3D,MAAO,EACPD,cAAe,ICAjB,IACe8E,EADKC,0BAAgB,CAAE9H,MCFvB,WAA+C,IAAhCoB,EAA+B,uDAFvC,GAE+B2G,EAAQ,uCAC3D,OAAQA,EAAOjI,MACf,IAAM,YACJ,OAAOiI,EAAO/H,MAChB,QACE,OAAOoB,IDHkC0B,ODG9B,WAAgD,IAAhC1B,EAA+B,uDAAvBwG,EAAeG,EAAQ,uCAC5D,OAAQA,EAAOjI,MACf,IAAM,kBACJ,OAAO,2BACFsB,GADL,IAEEF,KAAM6G,EAAOlI,KAAKqB,KAClB6B,cAAegF,EAAOlI,KAAKsB,MAC3BwF,WAAY,EACZ3D,MAAO,IAEX,IAAM,eACJ,OAAO,2BACF5B,GADL,IAEE4B,MAAO+E,EAAO/E,QAElB,IAAM,oBACJ,OAAO,2BACF5B,GADL,IAEEuF,WAAYvF,EAAMuF,WAAa,IAEnC,QACE,OAAOvF,MGvBL4G,EAAQC,sBACZJ,EACAK,8BACEC,0BAAgBC,OAIhBZ,OAAOa,UACTb,OAAOQ,MAAQA,GAGFA,QCRfM,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAQA,GAChB,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SLuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtI,MAAK,SAAAuI,GACjCA,EAAaC,kB","file":"static/js/main.7715a111.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export function playerData(data) {\n  return {\n    type: 'ADD_PLAYER_DATA',\n    data,\n  };\n}\n\nexport function tokenData(token) {\n  return {\n    type: 'ADD_TOKEN',\n    token,\n  };\n}\n\nexport function setRanking(payload) {\n  return {\n    type: 'SET_RANKING',\n    payload,\n  };\n}\n\nexport function updateScore(score) {\n  return {\n    type: 'UPDATE_SCORE',\n    score,\n  };\n}\n\nexport function updateAssertions() {\n  return {\n    type: 'UPDATE_ASSERTIONS',\n  };\n}\n","async function customFetch(URL, ENDPOINT) {\n  return fetch(URL + ENDPOINT)\n    .then((response) => response.json())\n    .then((data) => data)\n    .catch((error) => console.log('Error: ', error));\n}\n\nexport function fetchToken() {\n  const URL = 'https://opentdb.com';\n  const ENDPOINT = '/api_token.php?command=request';\n  return customFetch(URL, ENDPOINT);\n}\n\nexport function fetchQuestion(token) {\n  const URL = 'https://opentdb.com';\n  const ENDPOINT = `/api.php?amount=5&token=${token}`;\n  return customFetch(URL, ENDPOINT);\n}\n","import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { tokenData, playerData } from '../../redux/actions';\nimport { fetchToken } from '../../services/api';\nimport '../../App.css';\nimport TriviaLogo from '../../trivia.png';\n\nexport default function Login() {\n  const [state, setState] = React.useState({\n    name: '',\n    email: '',\n  });\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  function handleChange({ target }) {\n    const { name, value } = target;\n    setState({\n      ...state,\n      [name]: value,\n    });\n  }\n\n  async function handlePlay() {\n    const { token } = await fetchToken();\n    dispatch(tokenData(token));\n    dispatch(playerData(state));\n    history.push('/game');\n  }\n\n  return (\n    <div id=\"main-div\">\n      <img id=\"logo\" src={ TriviaLogo } alt=\"Trivia Logo\" />\n      <form id=\"form-login\" onSubmit={ (event) => event.preventDefault() }>\n        <label className=\"label-login\" htmlFor=\"input-name\">\n          <input\n            className=\"input-login\"\n            name=\"name\"\n            id=\"input-name\"\n            type=\"text\"\n            data-testid=\"input-player-name\"\n            value={ state.name }\n            onChange={ handleChange }\n            placeholder=\"Name\"\n          />\n        </label>\n        <label className=\"label-login\" htmlFor=\"input-email\">\n          <input\n            className=\"input-login\"\n            name=\"email\"\n            id=\"input-email\"\n            type=\"email\"\n            data-testid=\"input-gravatar-email\"\n            value={ state.email }\n            onChange={ handleChange }\n            placeholder=\"Email\"\n          />\n        </label>\n        <button\n          className=\"btn-login\"\n          id=\"btn-play\"\n          type=\"submit\"\n          data-testid=\"btn-play\"\n          disabled={ state.name === '' || state.email === '' }\n          onClick={ handlePlay }\n        >\n          Play\n        </button>\n      </form>\n\n    </div>\n  );\n}\n\n/* <Link to=\"/settings\">\n        <button\n          data-testid=\"btn-settings\"\n          type=\"button\"\n        >\n          Configurações do jogo\n        </button>\n      </Link> */\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport './Header.css';\n\nexport default function Header() {\n  const {\n    player: { gravatarEmail, name, score },\n  } = useSelector((state) => state);\n\n  return (\n    <header>\n      <section>\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ `https://www.gravatar.com/avatar/${md5(\n            gravatarEmail,\n          ).toString()}` }\n          alt=\"avatar\"\n        />\n        <p data-testid=\"header-player-name\">{name}</p>\n      </section>\n      <div>\n        <p data-testid=\"header-score\">{`score: ${score} points`}</p>\n      </div>\n    </header>\n  );\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default function AnswerOptions({ shuffled, handleClick, answered }) {\n  return (\n    <div data-testid=\"answer-options\">\n      {shuffled.map(({ text, correct, id }, i) => (\n        <button\n          onClick={ () => handleClick(correct) }\n          className={ `question ${answered && correct && 'correct'}\n              ${answered && !correct && 'incorrect'}` }\n          data-testid={ correct ? 'correct-answer' : `wrong-answer-${id}` }\n          key={ `${text}:${i}` }\n          type=\"button\"\n          disabled={ answered }\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nAnswerOptions.propTypes = {\n  answered: PropTypes.bool,\n  handleClick: PropTypes.func,\n  shuffled: PropTypes.arrayOf({}),\n}.isRequired;\n","const shuffleAnswers = (answers) => {\n  const sortNumber = 0.5;\n  const answersObj = [\n    { text: answers.correct_answer, correct: true },\n    ...answers.incorrect_answers.map(\n      (answer) => ({ text: answer, correct: false }),\n    ),\n  ];\n  return answersObj.sort(() => Math.random() - sortNumber);\n};\n\nexport default shuffleAnswers;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { fetchQuestion, fetchToken } from '../../services/api';\nimport Header from '../../components/Header/index';\n\nimport { tokenData, updateScore, updateAssertions } from '../../redux/actions';\nimport './game.css';\nimport AnswerOptions from '../../components/AnswerOptions/index';\nimport shuffleAnswers from '../../helpers/func';\n\nconst MEDIUM = 2;\nconst HARD = 3;\nconst TEN = 10;\nconst THIRTY = 30;\nconst ONE_SECOND = 1000;\n\nexport default function Game() {\n  const [questions, setQuestions] = useState([]);\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [shuffled, setShuffled] = useState([]);\n  const [answered, setAnswered] = useState(false);\n  const [timer, setTimer] = useState(THIRTY);\n\n  const { token } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  function handleClick(correct) {\n    setAnswered(true);\n    const difficultyScores = {\n      hard: TEN + timer * HARD,\n      medium: TEN + timer * MEDIUM,\n      easy: TEN + timer,\n    };\n\n    if (correct) {\n      dispatch(updateAssertions());\n      dispatch(\n        updateScore(difficultyScores[questions[questionIndex].difficulty]),\n      );\n    }\n  }\n\n  function handleNextClick() {\n    setTimer(THIRTY);\n    setAnswered(false);\n    setQuestionIndex((state) => state + 1);\n    if (questionIndex === questions.length - 1) {\n      history.push('/feedback');\n    }\n  }\n\n  useEffect(() => {\n    const interval = setTimeout(() => {\n      setTimer((prev) => prev - 1);\n    }, ONE_SECOND);\n\n    if (timer === 0) setAnswered(true);\n    if (answered) return clearTimeout(interval);\n\n    return () => clearTimeout(interval);\n  }, [answered, timer]);\n\n  useEffect(() => {\n    const getNewQuestion = async () => {\n      if (token) {\n        try {\n          const data = await fetchQuestion(token);\n          setQuestions(data.results);\n          console.log(data.results);\n        } catch {\n          const newToken = fetchToken();\n          dispatch(tokenData(newToken));\n        }\n      }\n    };\n    getNewQuestion();\n  }, [token, dispatch]);\n\n  useEffect(() => {\n    if (questions[questionIndex]) {\n      setShuffled(shuffleAnswers(questions[questionIndex]));\n    }\n  }, [questions, questionIndex]);\n\n  return (\n    <>\n      <Header />\n      <div className=\"game-div\">\n        <p className=\"p-game\" data-testid=\"question-category\">\n          {questions[questionIndex]?.category}\n        </p>\n        <h3 data-testid=\"question-text\">\n          {decodeURIComponent(questions[questionIndex]?.question.replace(/&quot;/g, '\"'))}\n        </h3>\n\n        <AnswerOptions\n          handleClick={ handleClick }\n          shuffled={ shuffled }\n          answered={ answered }\n        />\n        {answered && (\n          <button\n            onClick={ handleNextClick }\n            data-testid=\"btn-next\"\n            type=\"button\"\n            className=\"btn-next\"\n          >\n            Next\n          </button>\n        )}\n        <h1 className=\"timer\">{timer}</h1>\n      </div>\n    </>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './ranking.css';\n\nexport default function Ranking() {\n  const [players, setPlayers] = useState([]);\n  useEffect(() => {\n    const verifyStorage = JSON.parse(localStorage.getItem('ranking'));\n    console.log(verifyStorage);\n    if (verifyStorage) {\n      setPlayers(verifyStorage.sort((a, b) => b.score - a.score));\n    }\n  }, []);\n  return (\n    <div className=\"div-ranking\">\n      <h1 data-testid=\"ranking-title\">Ranking</h1>\n      { players.map((a, index) => (\n        <div key={ index } className=\"div-ranking-line\">\n          <h4 data-testid={ `player-name-${index}` }>{a.name}</h4>\n          <span data-testid={ `player-score-${index}` }>\n            {a.score }\n            {'   ----'}\n            pontos\n          </span>\n        </div>\n      ))}\n      <Link to=\"/\">\n        <button\n          data-testid=\"btn-go-home\"\n          type=\"button\"\n          className=\"btn-ranking\"\n        >\n          Go Home\n        </button>\n      </Link>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport Header from '../../components/Header';\nimport './feedback.css';\n\nconst THREE = 3;\n\nexport default function Feedback() {\n  const { assertions, score, name, gravatarEmail } = useSelector(({ player }) => player);\n  const playersInfo = {\n    name,\n    score,\n    picture: `https://www.gravatar.com/avatar/${md5(gravatarEmail).toString()}` };\n  const verifyStorage = JSON.parse(localStorage.getItem('ranking'));\n\n  if (!verifyStorage) {\n    localStorage.setItem('ranking', JSON.stringify([playersInfo]));\n  } else {\n    localStorage.setItem('ranking', JSON.stringify([...verifyStorage, playersInfo]));\n  }\n\n  return (\n    <>\n      <Header />\n      <div data-testid=\"feedback-text\">\n        <p data-testid=\"feedback-text\">\n          {\n            assertions < THREE ? 'Could be better...' : 'Well Done!'\n          }\n        </p>\n        <p className=\"feedback -p\">\n          Sua pontuação total:\n          <span data-testid=\"feedback-total-score\">\n            {score}\n            <span> pontos </span>\n          </span>\n        </p>\n        <p className=\"feedback -p\">\n          Voce acertou um total de:\n          <span data-testid=\"feedback-total-question\">\n            { assertions }\n            <span> perguntas </span>\n          </span>\n        </p>\n        <Link to=\"/\">\n          <button\n            data-testid=\"btn-play-again\"\n            type=\"button\"\n            className=\"btn-feedback\"\n          >\n            Play Again\n          </button>\n        </Link>\n        <Link to=\"/ranking\">\n          <button\n            data-testid=\"btn-ranking\"\n            type=\"button\"\n            className=\"btn-feedback\"\n          >\n            Ranking\n          </button>\n        </Link>\n      </div>\n    </>\n  );\n}\n","import { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom';\nimport React from 'react';\nimport Login from '../pages/Login';\nimport Game from '../pages/Game';\nimport Ranking from '../pages/Ranking';\nimport Feedback from '../pages/Feedback';\nimport Settings from '../pages/Settings';\n\nconst Routes = () => (\n  <HashRouter basename={ process.env.PUBLIC_URL }>\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/feedback\" component={ Feedback } />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Routes;\n","import React from 'react';\nimport './App.css';\nimport Routes from './routes/index.routes';\n\nexport default function App() {\n  return (\n    <Routes />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nexport default function player(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ('ADD_PLAYER_DATA'):\n    return {\n      ...state,\n      name: action.data.name,\n      gravatarEmail: action.data.email,\n      assertions: 0,\n      score: 0,\n    };\n  case ('UPDATE_SCORE'):\n    return {\n      ...state,\n      score: action.score,\n    };\n  case ('UPDATE_ASSERTIONS'):\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport token from './token';\n\nconst rootReducer = combineReducers({ token, player });\nexport default rootReducer;\n","const INITIAL_STATE = '';\n\nexport default function token(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ('ADD_TOKEN'):\n    return action.token;\n  default:\n    return state;\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}